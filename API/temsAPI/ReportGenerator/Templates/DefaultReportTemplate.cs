using OfficeOpenXml;
using ReportGenerator.Helpers;
using ReportGenerator.Models;
using ReportGenerator.Models.Styles;
using System;
using System.Drawing;
using System.IO;
using System.Reflection;

namespace ReportGenerator.Templates
{
    class DefaultReportTemplate : IReportTemplate
    {
        readonly ReportData _reportData;
        readonly FileInfo _file;

        public DefaultReportTemplate(ReportData reportData, FileInfo file)
        {
            _reportData = reportData;
            _file = file;
        }

        public void GenerateReport()
        {
            using (var pck = new ExcelPackage(_file))
            {
                PopulateExcelPackage(pck);
                pck.Save();
            }
        }

        private void SetDefaults(ExcelWorksheet ws)
        {
            // Default font: Times new roman
            // size: 12 pt
            var allCells = ws.Cells[ws.Dimension.Address];
            var cellFont = allCells.Style.Font;
            cellFont.SetFromFont(new Font("Times New Roman", 12));

            // Default column width: 15
            for (int i = 1; i < 20; i++)
                ws.Column(i).Width = 15;

        }

        private void PopulateExcelPackage(ExcelPackage pck)
        {
            var styles = new ExcelPackageStyleCollection(pck);
            var resourceHelper = new ReportResourceHelper();
            var stylingHelper = new ReportStylingHelper();

            ExcelWorksheet ws = pck.Workbook.Worksheets.Add(_reportData.Name ?? "Items");

            SetDefaults(ws);

            // Used for tracking the last written row
            int lastRowTracker = 2;
            int pageWidthInCols = 6; // 1 page = 6 cols width

            // Add TEMS and CIHCahul logos
            if (resourceHelper.InsertImage("tems_logo_small.png", ws, lastRowTracker, 1)
                && resourceHelper.InsertImage("cihc_logo_small.jpg", ws, lastRowTracker, 3))
                lastRowTracker += 2;

            // Add 'Generated by (name) on (date)'
            stylingHelper.MergeRowWithWrap(ws, lastRowTracker, 1, lastRowTracker);
            ws.Cells[lastRowTracker, 1].StyleName = styles.GetStyleName(ExcelStyleNames.SmallTextStyle);
            ws.Cells[lastRowTracker, 1].Value = $"Generated by {_reportData.GeneratedBy} on {DateTime.Now.ToString("dd.MM.yyyy  HH:mm")}";
            lastRowTracker += 2;

            // Write report name (If any)
            if (!String.IsNullOrEmpty(_reportData.Name))
            {
                stylingHelper.MergeRowWithWrap(ws, lastRowTracker, 1, lastRowTracker);
                ws.Cells[lastRowTracker, 1].StyleName = styles.GetStyleName(ExcelStyleNames.ReportTitle);
                ws.Cells[lastRowTracker, 1].Value = _reportData.Name;
                lastRowTracker += 2;
            }

            // Write report header (if any)
            if (!String.IsNullOrEmpty(_reportData.Header))
            {
                stylingHelper.MergeRowWithWrap(ws, lastRowTracker, 1, lastRowTracker);
                ws.Cells[lastRowTracker, 1].StyleName = styles.GetStyleName(ExcelStyleNames.PrimaryHeader);
                ws.Cells[lastRowTracker, 1].Value = _reportData.Header;
                lastRowTracker += 2;
            }

            lastRowTracker += 1;

            // Write report data
            for (int i = 0; i < _reportData.ReportItemGroups.Count; i++)
            {
                ReportItemGroup itemGroup = _reportData.ReportItemGroups[i];

                // Write report item group name (delimitator)
                ws.Cells[$"B{lastRowTracker}"].Value = itemGroup.Name == null ? "" : "🔖 " + itemGroup.Name;
                ws.Cells[$"B{lastRowTracker}"].StyleName = styles.GetStyleName(ExcelStyleNames.SecondaryHeader);
                lastRowTracker += 2;

                // Write item group data, represented by a data table
                var writtenCells = ws.Cells[$"B{lastRowTracker}"].LoadFromDataTable(itemGroup.ItemsTable, true);

                // Table styling
                writtenCells.StyleName = styles.GetStyleName(ExcelStyleNames.Bordered);
                writtenCells.Style.WrapText = true;

                lastRowTracker += itemGroup.ItemsTable.Rows.Count + 3;
            }

            // Write report footer (if any)
            if (_reportData.Footer != null)
            {
                ws.Cells[$"B{lastRowTracker}"].StyleName = styles.GetStyleName(ExcelStyleNames.SecondaryHeader);
                ws.Cells[$"B{lastRowTracker}"].Value = _reportData.Footer;

                lastRowTracker += 3;
            }

            if (_reportData.Signatories != null && _reportData.Signatories.Count > 0)
            {
                ws.Cells[$"B{lastRowTracker}"].StyleName = styles.GetStyleName(ExcelStyleNames.SecondaryHeader);
                ws.Cells[$"B{lastRowTracker}"].Value = "Signatories list";
                lastRowTracker += 2;

                foreach (string s in _reportData.Signatories)
                {
                    ws.Cells[$"B{lastRowTracker}"].StyleName = styles.GetStyleName(ExcelStyleNames.TertiaryHeader);
                    ws.Cells[$"B{lastRowTracker}"].Value = s;
                    ws.Cells[$"B{++lastRowTracker}"].Value = "________________________ (Signature)";

                    lastRowTracker++;
                }
            }
        }
    }
}
