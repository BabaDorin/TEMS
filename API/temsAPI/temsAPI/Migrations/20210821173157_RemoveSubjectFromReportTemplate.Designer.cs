// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using temsAPI.Data;

namespace temsAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210821173157_RemoveSubjectFromReportTemplate")]
    partial class RemoveSubjectFromReportTemplate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EquipmentDefinitionReportTemplate", b =>
                {
                    b.Property<string>("EquipmentDefinitionsId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ReportTemplatesMemberOfId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("EquipmentDefinitionsId", "ReportTemplatesMemberOfId");

                    b.HasIndex("ReportTemplatesMemberOfId");

                    b.ToTable("EquipmentDefinitionReportTemplate");
                });

            modelBuilder.Entity("EquipmentTicket", b =>
                {
                    b.Property<string>("EquipmentsId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TicketsId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("EquipmentsId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("EquipmentTicket");
                });

            modelBuilder.Entity("EquipmentTypeEquipmentType", b =>
                {
                    b.Property<string>("ChildrenId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ParentsId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ChildrenId", "ParentsId");

                    b.HasIndex("ParentsId");

                    b.ToTable("EquipmentTypeEquipmentType");
                });

            modelBuilder.Entity("EquipmentTypeProperty", b =>
                {
                    b.Property<string>("EquipmentTypesId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PropertiesId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("EquipmentTypesId", "PropertiesId");

                    b.HasIndex("PropertiesId");

                    b.ToTable("EquipmentTypeProperty");
                });

            modelBuilder.Entity("EquipmentTypeReportTemplate", b =>
                {
                    b.Property<string>("EquipmentTypesId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ReportTemplatesMemberOfId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("EquipmentTypesId", "ReportTemplatesMemberOfId");

                    b.HasIndex("ReportTemplatesMemberOfId");

                    b.ToTable("EquipmentTypeReportTemplate");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PersonnelPersonnelPosition", b =>
                {
                    b.Property<string>("PersonnelId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PositionsId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PersonnelId", "PositionsId");

                    b.HasIndex("PositionsId");

                    b.ToTable("PersonnelPersonnelPosition");
                });

            modelBuilder.Entity("PersonnelReportTemplate", b =>
                {
                    b.Property<string>("ReportTemplatesAssignedId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SignatoriesId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ReportTemplatesAssignedId", "SignatoriesId");

                    b.HasIndex("SignatoriesId");

                    b.ToTable("PersonnelReportTemplate");
                });

            modelBuilder.Entity("PersonnelReportTemplate1", b =>
                {
                    b.Property<string>("PersonnelId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ReportTemplatesMemberId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PersonnelId", "ReportTemplatesMemberId");

                    b.HasIndex("ReportTemplatesMemberId");

                    b.ToTable("PersonnelReportTemplate1");
                });

            modelBuilder.Entity("PersonnelRoom", b =>
                {
                    b.Property<string>("RoomsSupervisoriedId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SupervisoriesId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("RoomsSupervisoriedId", "SupervisoriesId");

                    b.HasIndex("SupervisoriesId");

                    b.ToTable("PersonnelRoom");
                });

            modelBuilder.Entity("PersonnelTicket", b =>
                {
                    b.Property<string>("PersonnelId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TicketsId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PersonnelId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("PersonnelTicket");
                });

            modelBuilder.Entity("PropertyReportTemplate", b =>
                {
                    b.Property<string>("PropertiesId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ReportTemplatesMemberOfId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("PropertiesId", "ReportTemplatesMemberOfId");

                    b.HasIndex("ReportTemplatesMemberOfId");

                    b.ToTable("PropertyReportTemplate");
                });

            modelBuilder.Entity("ReportTemplateRoom", b =>
                {
                    b.Property<string>("ReportTemplatesMemberOfId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoomsId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ReportTemplatesMemberOfId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("ReportTemplateRoom");
                });

            modelBuilder.Entity("RoomRoomLabel", b =>
                {
                    b.Property<string>("LabelsId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoomsId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("LabelsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("RoomRoomLabel");
                });

            modelBuilder.Entity("RoomTicket", b =>
                {
                    b.Property<string>("RoomsId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TicketsId")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("RoomsId", "TicketsId");

                    b.HasIndex("TicketsId");

                    b.ToTable("RoomTicket");
                });

            modelBuilder.Entity("TEMSUserTicket", b =>
                {
                    b.Property<string>("AssignedTicketsId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AssigneesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AssignedTicketsId", "AssigneesId");

                    b.HasIndex("AssigneesId");

                    b.ToTable("TEMSUserTicket");
                });

            modelBuilder.Entity("TEMSUserTicket1", b =>
                {
                    b.Property<string>("ClosedAndThenReopenedTicketsId")
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PreviouslyClosedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ClosedAndThenReopenedTicketsId", "PreviouslyClosedById");

                    b.HasIndex("PreviouslyClosedById");

                    b.ToTable("TEMSUserTicket1");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.Announcement", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("AuthorID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.CommonNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("SendBrowser")
                        .HasColumnType("bit");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("SendPush")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSMS")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CommonNotifications");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.FrequentTicketProblem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Problem")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("FrequentTicketProblems");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.Log", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("EquipmentID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("PersonnelID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoomID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("PersonnelID");

                    b.HasIndex("RoomID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.Ticket", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClosedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateClosed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatePinned")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<string>("LabelId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Problem")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StatusId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("TrackingNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("ClosedById");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LabelId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.UserCommonNotification", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NotificationId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserCommonNotification");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.UserNotification", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<bool>("SendBrowser")
                        .HasColumnType("bit");

                    b.Property<bool>("SendEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("SendPush")
                        .HasColumnType("bit");

                    b.Property<bool>("SendSMS")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.DataType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DataTypes");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<string>("EquipmentDefinitionID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("ParentID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegisteredByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TEMSID")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("EquipmentDefinitionID");

                    b.HasIndex("ParentID");

                    b.HasIndex("RegisteredByID");

                    b.HasIndex("SerialNumber");

                    b.HasIndex("TEMSID");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentAllocation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAllocated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("PersonnelID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoomID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("EquipmentID");

                    b.HasIndex("PersonnelID");

                    b.HasIndex("RoomID");

                    b.ToTable("EquipmentAllocations");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentDefinition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Currency")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EquipmentTypeID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("ParentID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("EquipmentTypeID");

                    b.HasIndex("Identifier");

                    b.HasIndex("ParentID");

                    b.ToTable("EquipmentDefinitions");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentSpecifications", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<string>("EquipmentDefinitionID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Value")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("EquipmentDefinitionID");

                    b.HasIndex("PropertyID");

                    b.ToTable("EquipmentSpecifications");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("EditableTypeInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.Property", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DataTypeID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("EditablePropertyInfo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<int?>("Min")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Options")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("Required")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("DataTypeID");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.PropertyEquipmentTypeAssociation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PropertyID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("TypeID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyID");

                    b.HasIndex("TypeID");

                    b.ToTable("PropertyEquipmentTypeAssociations");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.KeyEntities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Identifier")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("RoomId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("RoomId");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.KeyEntities.KeyAllocation", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateAllocated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateReturned")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("KeyID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PersonnelID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("KeyID");

                    b.HasIndex("PersonnelID");

                    b.ToTable("KeyAllocations");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.LibraryEntities.LibraryFolder", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LibraryFolders");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.LibraryEntities.LibraryItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ActualName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("DbPath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Downloads")
                        .HasColumnType("int");

                    b.Property<double>("FileSize")
                        .HasColumnType("float");

                    b.Property<string>("LibraryFolderId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("UploadedById")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LibraryFolderId");

                    b.HasIndex("UploadedById");

                    b.ToTable("LibraryItems");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.BugReport", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Attachments")
                        .HasMaxLength(10000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<string>("ReportType")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByID");

                    b.ToTable("BugReports");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Label", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Personnel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.ToTable("Personnel");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.PersonnelPosition", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.ToTable("PersonnelPositions");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Room", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1500)
                        .HasColumnType("nvarchar(1500)");

                    b.Property<int?>("Floor")
                        .HasColumnType("int");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.RoomLabel", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.ToTable("RoomLabels");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Status", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<int>("ImportanceIndex")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.Report.Report", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DBPath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("DateGenerated")
                        .HasColumnType("datetime2");

                    b.Property<string>("GeneratedByID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Template")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("GeneratedByID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.Report.ReportTemplate", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommonProperties")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CreatedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Footer")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Header")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IncludeChildren")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeDefect")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeFunctional")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInUse")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeParent")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeUnused")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SeparateBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("CreatedById");

                    b.ToTable("ReportTemplates");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.UserEntities.Privilege", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Identifier")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Privileges");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.UserEntities.RolePrivileges", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PrivilegeID")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PrivilegeID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePrivileges");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.UserEntities.TemsJWT", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Content")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("JWTBlacklist");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.UserEntities.TEMSUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("ArchievedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("DateArchieved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("GetEmailNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArchieved")
                        .HasColumnType("bit");

                    b.Property<string>("PersonnelId")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PrefferedLang")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasDefaultValue("en");

                    b.Property<string>("ProfilePhotoFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhotoMinifiedFileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ArchievedById");

                    b.HasIndex("PersonnelId")
                        .IsUnique()
                        .HasFilter("[PersonnelId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("TEMSUser");
                });

            modelBuilder.Entity("EquipmentDefinitionReportTemplate", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentDefinition", null)
                        .WithMany()
                        .HasForeignKey("EquipmentDefinitionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.Report.ReportTemplate", null)
                        .WithMany()
                        .HasForeignKey("ReportTemplatesMemberOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentTicket", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.CommunicationEntities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentTypeEquipmentType", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", null)
                        .WithMany()
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", null)
                        .WithMany()
                        .HasForeignKey("ParentsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentTypeProperty", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", null)
                        .WithMany()
                        .HasForeignKey("EquipmentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EquipmentTypeReportTemplate", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", null)
                        .WithMany()
                        .HasForeignKey("EquipmentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.Report.ReportTemplate", null)
                        .WithMany()
                        .HasForeignKey("ReportTemplatesMemberOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonnelPersonnelPosition", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", null)
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.PersonnelPosition", null)
                        .WithMany()
                        .HasForeignKey("PositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonnelReportTemplate", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.Report.ReportTemplate", null)
                        .WithMany()
                        .HasForeignKey("ReportTemplatesAssignedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", null)
                        .WithMany()
                        .HasForeignKey("SignatoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonnelReportTemplate1", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", null)
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.Report.ReportTemplate", null)
                        .WithMany()
                        .HasForeignKey("ReportTemplatesMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonnelRoom", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsSupervisoriedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", null)
                        .WithMany()
                        .HasForeignKey("SupervisoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PersonnelTicket", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", null)
                        .WithMany()
                        .HasForeignKey("PersonnelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.CommunicationEntities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PropertyReportTemplate", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.Report.ReportTemplate", null)
                        .WithMany()
                        .HasForeignKey("ReportTemplatesMemberOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ReportTemplateRoom", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.Report.ReportTemplate", null)
                        .WithMany()
                        .HasForeignKey("ReportTemplatesMemberOfId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomRoomLabel", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.OtherEntities.RoomLabel", null)
                        .WithMany()
                        .HasForeignKey("LabelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoomTicket", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.CommunicationEntities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("TicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TEMSUserTicket", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.CommunicationEntities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("AssignedTicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", null)
                        .WithMany()
                        .HasForeignKey("AssigneesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TEMSUserTicket1", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.CommunicationEntities.Ticket", null)
                        .WithMany()
                        .HasForeignKey("ClosedAndThenReopenedTicketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", null)
                        .WithMany()
                        .HasForeignKey("PreviouslyClosedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.Announcement", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "Author")
                        .WithMany("Announcements")
                        .HasForeignKey("AuthorID");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.Log", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedLogs")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "CreatedBy")
                        .WithMany("CreatedLogs")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.Equipment", "Equipment")
                        .WithMany("Logs")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", "Personnel")
                        .WithMany("Logs")
                        .HasForeignKey("PersonnelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Room", "Room")
                        .WithMany("Logs")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ArchievedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Equipment");

                    b.Navigation("Personnel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.Ticket", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchievedTickets")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ClosedBy")
                        .WithMany("ClosedTickets")
                        .HasForeignKey("ClosedById");

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "CreatedBy")
                        .WithMany("CreatedTickets")
                        .HasForeignKey("CreatedById");

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Label", "Label")
                        .WithMany("Tickets")
                        .HasForeignKey("LabelId");

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Status", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId");

                    b.Navigation("ArchievedBy");

                    b.Navigation("ClosedBy");

                    b.Navigation("CreatedBy");

                    b.Navigation("Label");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.UserCommonNotification", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.CommunicationEntities.CommonNotification", "Notification")
                        .WithMany("UserCommonNotifications")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "User")
                        .WithMany("UserCommonNotifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.UserNotification", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "User")
                        .WithMany("UserNotifications")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.Equipment", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchievedEquipment")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentDefinition", "EquipmentDefinition")
                        .WithMany("Equipment")
                        .HasForeignKey("EquipmentDefinitionID");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.Equipment", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "RegisteredBy")
                        .WithMany("RegisteredEquipment")
                        .HasForeignKey("RegisteredByID");

                    b.Navigation("ArchievedBy");

                    b.Navigation("EquipmentDefinition");

                    b.Navigation("Parent");

                    b.Navigation("RegisteredBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentAllocation", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedAllocations")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.Equipment", "Equipment")
                        .WithMany("EquipmentAllocations")
                        .HasForeignKey("EquipmentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", "Personnel")
                        .WithMany("EquipmentAllocations")
                        .HasForeignKey("PersonnelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Room", "Room")
                        .WithMany("EquipmentAllocations")
                        .HasForeignKey("RoomID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ArchievedBy");

                    b.Navigation("Equipment");

                    b.Navigation("Personnel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentDefinition", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedDefinitions")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", "EquipmentType")
                        .WithMany("EquipmentDefinitions")
                        .HasForeignKey("EquipmentTypeID");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentDefinition", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentID");

                    b.Navigation("ArchievedBy");

                    b.Navigation("EquipmentType");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentSpecifications", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedSpecifications")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentDefinition", "EquipmentDefinition")
                        .WithMany("EquipmentSpecifications")
                        .HasForeignKey("EquipmentDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.Property", "Property")
                        .WithMany("EquipmentSpecifications")
                        .HasForeignKey("PropertyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ArchievedBy");

                    b.Navigation("EquipmentDefinition");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedTypes")
                        .HasForeignKey("ArchievedById");

                    b.Navigation("ArchievedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.Property", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedProperties")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.DataType", "DataType")
                        .WithMany("DataTypeProperties")
                        .HasForeignKey("DataTypeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ArchievedBy");

                    b.Navigation("DataType");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.PropertyEquipmentTypeAssociation", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyID");

                    b.HasOne("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeID");

                    b.Navigation("Property");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.KeyEntities.Key", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedKeys")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Room", "Room")
                        .WithMany("Keys")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ArchievedBy");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.KeyEntities.KeyAllocation", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedKeyAllocations")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.KeyEntities.Key", "Key")
                        .WithMany("KeyAllocations")
                        .HasForeignKey("KeyID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", "Personnel")
                        .WithMany("KeyAllocations")
                        .HasForeignKey("PersonnelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ArchievedBy");

                    b.Navigation("Key");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.LibraryEntities.LibraryItem", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.LibraryEntities.LibraryFolder", "LibraryFolder")
                        .WithMany()
                        .HasForeignKey("LibraryFolderId");

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "UploadedBy")
                        .WithMany("UploadedLibraryItems")
                        .HasForeignKey("UploadedById");

                    b.Navigation("LibraryFolder");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.BugReport", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "CreatedBy")
                        .WithMany("BugReports")
                        .HasForeignKey("CreatedByID");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Personnel", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedPersonnel")
                        .HasForeignKey("ArchievedById");

                    b.Navigation("ArchievedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.PersonnelPosition", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedPersonnelPositions")
                        .HasForeignKey("ArchievedById");

                    b.Navigation("ArchievedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Room", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedRooms")
                        .HasForeignKey("ArchievedById");

                    b.Navigation("ArchievedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.RoomLabel", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedRoomLabels")
                        .HasForeignKey("ArchievedById");

                    b.Navigation("ArchievedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Status", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedStatuses")
                        .HasForeignKey("ArchievedById");

                    b.Navigation("ArchievedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.Report.Report", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "GeneratedBy")
                        .WithMany("GeneratedReports")
                        .HasForeignKey("GeneratedByID");

                    b.Navigation("GeneratedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.Report.ReportTemplate", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany("ArchivedReportTemplates")
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "CreatedBy")
                        .WithMany("CreatedReportTemplates")
                        .HasForeignKey("CreatedById");

                    b.Navigation("ArchievedBy");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.UserEntities.RolePrivileges", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.Privilege", "Privilege")
                        .WithMany()
                        .HasForeignKey("PrivilegeID");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleID");

                    b.Navigation("Privilege");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.UserEntities.TEMSUser", b =>
                {
                    b.HasOne("temsAPI.Data.Entities.UserEntities.TEMSUser", "ArchievedBy")
                        .WithMany()
                        .HasForeignKey("ArchievedById");

                    b.HasOne("temsAPI.Data.Entities.OtherEntities.Personnel", "Personnel")
                        .WithOne("TEMSUser")
                        .HasForeignKey("temsAPI.Data.Entities.UserEntities.TEMSUser", "PersonnelId");

                    b.Navigation("ArchievedBy");

                    b.Navigation("Personnel");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.CommunicationEntities.CommonNotification", b =>
                {
                    b.Navigation("UserCommonNotifications");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.DataType", b =>
                {
                    b.Navigation("DataTypeProperties");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.Equipment", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("EquipmentAllocations");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentDefinition", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Equipment");

                    b.Navigation("EquipmentSpecifications");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.EquipmentType", b =>
                {
                    b.Navigation("EquipmentDefinitions");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.EquipmentEntities.Property", b =>
                {
                    b.Navigation("EquipmentSpecifications");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.KeyEntities.Key", b =>
                {
                    b.Navigation("KeyAllocations");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Label", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Personnel", b =>
                {
                    b.Navigation("EquipmentAllocations");

                    b.Navigation("KeyAllocations");

                    b.Navigation("Logs");

                    b.Navigation("TEMSUser");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Room", b =>
                {
                    b.Navigation("EquipmentAllocations");

                    b.Navigation("Keys");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.OtherEntities.Status", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("temsAPI.Data.Entities.UserEntities.TEMSUser", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("ArchievedEquipment");

                    b.Navigation("ArchievedTickets");

                    b.Navigation("ArchivedAllocations");

                    b.Navigation("ArchivedDefinitions");

                    b.Navigation("ArchivedKeyAllocations");

                    b.Navigation("ArchivedKeys");

                    b.Navigation("ArchivedLogs");

                    b.Navigation("ArchivedPersonnel");

                    b.Navigation("ArchivedPersonnelPositions");

                    b.Navigation("ArchivedProperties");

                    b.Navigation("ArchivedReportTemplates");

                    b.Navigation("ArchivedRoomLabels");

                    b.Navigation("ArchivedRooms");

                    b.Navigation("ArchivedSpecifications");

                    b.Navigation("ArchivedStatuses");

                    b.Navigation("ArchivedTypes");

                    b.Navigation("BugReports");

                    b.Navigation("ClosedTickets");

                    b.Navigation("CreatedLogs");

                    b.Navigation("CreatedReportTemplates");

                    b.Navigation("CreatedTickets");

                    b.Navigation("GeneratedReports");

                    b.Navigation("RegisteredEquipment");

                    b.Navigation("UploadedLibraryItems");

                    b.Navigation("UserCommonNotifications");

                    b.Navigation("UserNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
