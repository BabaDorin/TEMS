using OfficeOpenXml;
using OfficeOpenXml.Style;
using ReportGenerator.Helpers;
using ReportGenerator.Models;
using ReportGenerator.Models.Styles;
using ReportGenerator.Models.Styles.TemplateDefaults;
using System;
using System.Drawing;
using System.IO;

namespace ReportGenerator.Templates
{
    class DefaultReportTemplate : IReportTemplate
    {
        readonly ReportData _reportData;
        readonly FileInfo _file;

        public DefaultReportTemplate(ReportData reportData, FileInfo file)
        {
            _reportData = reportData;
            _file = file;
        }

        public void GenerateReport()
        {
            using (var pck = new ExcelPackage(_file))
            {
                PopulateExcelPackage(pck);
                pck.Save();
            }
        }

        private void SetDefaults(ExcelWorksheet ws)
        {
            //// Default font: Times new roman
            //// size: 12 pt
            //var allCells = ws.Cells[1, 1, 10, 1000];
            //var cellFont = allCells.Style.Font;
            //cellFont.SetFromFont(new Font("Times New Roman", 12));
            ws.Cells.Style.Font.Name = "Times New Roman";
            ws.Cells.Style.Font.Size = 12;

            // Default column width: 15
            for (int i = 1; i < 20; i++)
                ws.Column(i).Width = 14;
        }

        private void PopulateExcelPackage(ExcelPackage pck)
        {
            var styles = new ExcelPackageStyleCollection(pck, new DefaultTemplateStyle());
            var resourceHelper = new ReportResourceHelper();
            var stylingHelper = new ReportStylingHelper();

            ExcelWorksheet ws = pck.Workbook.Worksheets.Add(_reportData.Name ?? "Items");

            SetDefaults(ws);

            // Used for tracking the last written row
            int lastRowTracker = 2;
            int pageWidthInCols = 6; // 1 page = 6 cols width

            // Add TEMS and CIHCahul logos
            if (resourceHelper.InsertImage("tems_logo_small.png", ws, lastRowTracker, 1)
                && resourceHelper.InsertImage("cihc_logo_small.jpg", ws, lastRowTracker, 2))
                lastRowTracker += 2;

            // Add 'Generated by (name) on (date)'
            stylingHelper.MergeRowWithWrap(ws, lastRowTracker, 1, pageWidthInCols);
            ws.Cells[lastRowTracker, 1].StyleName = styles.GetStyleName(ExcelStyleNames.SmallTextStyle);
            ws.Cells[lastRowTracker, 1].Value = $"Generated by {_reportData.GeneratedBy} on {DateTime.Now.ToString("dd.MM.yyyy  HH:mm")}";
            lastRowTracker += 2;

            // Write report name (If any)
            if (!String.IsNullOrEmpty(_reportData.Name))
            {
                stylingHelper.MergeRowWithWrap(ws, lastRowTracker, 1, pageWidthInCols);
                var cell = ws.Cells[lastRowTracker, 1];
                cell.StyleName = styles.GetStyleName(ExcelStyleNames.ReportTitleStyle);
                cell.Value = _reportData.Name;
                ws.Row(lastRowTracker).Height = stylingHelper.MeasureTextHeight(
                    _reportData.Name,
                    cell.Style.Font,
                    14 * 6);
                lastRowTracker += 2;
            }

            // Write report header (if any)
            if (!String.IsNullOrEmpty(_reportData.Header))
            {
                stylingHelper.MergeRowWithWrap(ws, lastRowTracker, 1, pageWidthInCols);
                var cell = ws.Cells[lastRowTracker, 1];
                cell.StyleName = styles.GetStyleName(ExcelStyleNames.HeaderStyle);
                cell.Value = _reportData.Header;
                ws.Row(lastRowTracker).Height = stylingHelper.MeasureTextHeight(
                    _reportData.Header,
                    cell.Style.Font,
                    14 * 6);
                lastRowTracker += 2;
            }

            lastRowTracker += 1;

            // Write report data
            for (int i = 0; i < _reportData.ReportItemGroups.Count; i++)
            {
                ReportItemGroup itemGroup = _reportData.ReportItemGroups[i];

                // Write report item group name (delimitator) if exists
                if(itemGroup.Name != null)
                {
                    stylingHelper.MergeRowWithWrap(ws, lastRowTracker, 1, pageWidthInCols);
                    var cell = ws.Cells[lastRowTracker, 1];
                    ws.Cells[lastRowTracker, 1, lastRowTracker, pageWidthInCols].StyleName = styles.GetStyleName(ExcelStyleNames.ItemGroupLabelStyle);
                    cell.Value = itemGroup.Name;
                    ws.Row(lastRowTracker).Height = stylingHelper.MeasureTextHeight(
                        _reportData.Header,
                        cell.Style.Font,
                        14 * 6);
                    lastRowTracker += 2;
                }

                // Write item group data, represented by a data table
                ws.Cells[lastRowTracker, 1].LoadFromDataTable(itemGroup.ItemsTable, true);

                // Table header style
                var headerCells = ws.Cells[lastRowTracker, 1, lastRowTracker, itemGroup.ItemsTable.Columns.Count];
                headerCells.StyleName = styles.GetStyleName(ExcelStyleNames.ItemGroupTableHeaderStyle);

                // Table content style
                var contentCells = ws.Cells[lastRowTracker + 1, 1, lastRowTracker + itemGroup.ItemsTable.Rows.Count, itemGroup.ItemsTable.Columns.Count];
                contentCells.StyleName = styles.GetStyleName(ExcelStyleNames.ItemGroupTableContentStyle);

                lastRowTracker += itemGroup.ItemsTable.Rows.Count + 3;
            }

            // Write report footer (if any)
            if (!String.IsNullOrEmpty(_reportData.Footer))
            {
                stylingHelper.MergeRowWithWrap(ws, lastRowTracker, 1, pageWidthInCols);
                var cell = ws.Cells[lastRowTracker, 1];
                cell.StyleName = styles.GetStyleName(ExcelStyleNames.FooterStyle);
                cell.Value = _reportData.Footer;
                ws.Row(lastRowTracker).Height = stylingHelper.MeasureTextHeight(
                    _reportData.Footer,
                    cell.Style.Font,
                    14 * 6);
                lastRowTracker += 2;
            }

            // Write segnatories (in 2 columns)
            if (_reportData.Signatories != null && _reportData.Signatories.Count > 0)
            {
                for(int i = 0; i < _reportData.Signatories.Count; i++)
                {
                    int column = i % 2 == 0 ? 1 : 4;
                    
                    // Signatory's name
                    ws.Cells[lastRowTracker, column].StyleName = styles.GetStyleName(ExcelStyleNames.SignatoryStyle);
                    ws.Cells[lastRowTracker, column].Value = _reportData.Signatories[i];

                    // ______
                    ws.Cells[lastRowTracker, column + 1].StyleName = styles.GetStyleName(ExcelStyleNames.UnderlineStyle);

                    if (column % 2 == 0)
                        lastRowTracker += 2;
                }
            }
        }
    }
}
