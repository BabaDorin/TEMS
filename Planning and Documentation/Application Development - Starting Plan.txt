Core Aspects>>
    1. Building the database via code-first
    DEADLINE - 23.01.2021

    2. Building the UI and testing it using Test Data
    DEADLINE - 27.02.2021

    3. Add API Logic and CRUD Operations
    DEADLINE - 20.03.2021

    4. Connect the UI to API and use Real data
    DEADLINE - 24.03.2021

    5. Major Testing Sessions
    DEADLINE - 27.03.2021

    6. Hosting on tems.cihcahul.md
    DEADLINE - 10.04.2021

    7. Writting the Documentation
    DEADLINE - 30.04.2021

    Termenul de predare a diplomei copertata - 05.05.2021



Detailed Info for each of the points mentioned above.

---------- Start Of 1. Building the database via code-first

    a. Design the database
        The equipment >>
        - It should store different types of equipment. 
        - User should be able to add equipment types
        - User should be able to add properties to store for each equipment type
        - Minimum renundancy
        - Each item has a record in Items table (I mean we treat each item as separate)
        - Each item has at least one identifier, it can be TEMSID or/and SerialNumber.
        - Each item has a primary key (TEMSID and SerialNumber are attributes)
        - Each item can belong to a parent (Another item)
        - Stores info about allocations (Keys and equipment)
        - Stores other info (Users, Personal, announcements, Logs and so on)

    b. Code first
        - Operations will be performed only by using EntityFramework. (NO SQL)
        - Keep all clean migration consecutivity

---------- End Of 1. Building the database via code-first ----------
DEADLINE - 23.01.2021



---------- Start Of 2. Building the UI and testing it using Test Data ----------

    a. General Aspects
        - Learn as much as possible about Angular best practices and patterns
        - Find a clean and beutiful starting template (Like Bootstrap) 
        - Use observables
        - Use lazy loading
        - Very ergonomic interface, Leetcode-like
        - Use large collection of test data

    b. different page look for different roles (Same URL)
    
    c. SVG College Maps
        - Find of if there is a way to dynamically build svg and assign classes links to svb objects.
        - Get through this stuff https://www.webdesignerdepot.com/2018/02/8-best-free-libraries-for-svg/

---------- End Of 2. Building the UI and testing it using Test Data ----------
DEADLINE - 20.02.2021


---------- Start Of 3. Add API Logic and CRUD Operations ----------

        About APP users >>
        - An user can have on of three roles:
            - Administrator
                - assigns/removes roles
                - creates user accounts
                - Database management
                - Can create announcements
                - No access limitations
            - Technician
                - Can view and respond to tickets
                - Can add or remove items from the database
                - Can create announcements
                - The access is limted when it comes to adding new users
            - Personal
                - Can view logs
                - Can view information about items
                - Can create allocations 
            - User
                - View information about items, including logs
                - Creates tickets
                - Limited Access
        
        About APP Visitors >> (Basically, a visitor is a person who visits the site but
        does not have an account)
        - Very limted access.
        - Can create tickets
        - Can view public data about an item only if provides the temsID
        - Can view who keeps a key (If he is looking for it)
        - Can view public announcements

        CRUD >>
        - Might use https://github.com/dncuug/X.PagedList
        - Use lazy loading
        - Use Ajax
        - Make it extremely easy to move items from a class / person to another class / person.

        Logs >>
        - Each operation performed on an item is considered a log and it is stored.
        - Administrators can choose to delete logs after a period of time if the number of logs reaches an X amount
        - Multiple types of logs (Allocation log, Registering log, Archieving log, Repairing Log)
        - Display realtime logs on home page (For Technicians and Administrators)

        Tickets >>
        - Store tickets and relate them to equipment items
        - Autocomplete for frequent tickets (Cartrige needs replacing, No internet acccess etc.)
        - Ticket has
            - Author
            - Problem
            - Description
            - Location (Class room)
            - equipment identifier
        - Creating tickets is available for everyone, find a way to deal with possbile flood

        Upload / Download
        - Offers the possibility to upload and download uploaded programs

        Printing
        - Generate different kinds of excel reports (By class, By personal, By item, Allow to select desired fields,
        general inventory files (all of the equipment) and so on).

        Fresh Start
        - When the APP is created, the database is empty. It has to have an option to select the current database config
        or to have a default "CIH Database Template" which will work with SIC

        Bulk Upload
        - Upload data using .json files

---------- End Of 3. Add API Logic and CRUD Operations ----------
DEADLINE - 20.03.2021

---------- End Of 4. Connect the UI to API and use Real data ----------
---------- End Of 4. Connect the UI to API and use Real data ----------
DEADLINE - 20.03.2021

---------- End Of 5. Major Testing Sessions ----------
---------- End Of 5. Major Testing Sessions ----------
DEADLINE - 20.03.2021

---------- End Of 6. Hosting on tems.cihcahul.md ----------
---------- End Of 6. Hosting on tems.cihcahul.md ----------
DEADLINE - 20.03.2021

---------- End Of 7. Writting the Documentation ----------
---------- End Of 7. Writting the Documentation ----------
DEADLINE - 20.03.2021